#!/usr/bin/env node

/**
 *
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const express = require('express');
const Task = require('data.task');
const fs = require('fs');
const crypto = require('crypto');
const spdy = require('spdy');
const http2 = require('http2');

const readFile = (fileName, enc) =>
  new Task((rej, res) =>
    fs.readFile(fileName, enc, (err, contents) =>
      err ? rej(err) : res(contents))
  );

const getHash = content =>
  crypto
    .createHash('sha256')
    .update(content)
    .digest('hex');

const inspect = (input) => {
  console.log(input);
  return input;
};

// Matches paths like `/`, `/index.html`, `/about/` or `/about/index.html`.
const toplevelSection = /([^/]*)(\/|\/index.html)$/;

const resSucessHandler = ({res, hash, content}) => res.set({ 'ETag': hash, 'Cache-Control': 'public, no-cache' }).send(content);
const resErrorHanlder = ({res, error}) => res.status(500).send(error.toString());

const reqHandler = (req, res) =>
  readFile(`./app/${req.params[0]}/index.html`, 'utf-8')
    .map(content => ({ res, hash: getHash(content), content }))
    .map(inspect)
    .fork(error => resErrorHanlder({ res, error }), resSucessHandler);

// Self-signed certificate generated by `simplehttp2server`
// @see https://github.com/GoogleChrome/simplehttp2server

const app = Task.of(express())
    /**server side rendring... */
  .map(expressApp => expressApp.get(toplevelSection, reqHandler))
  .map(expressApp => expressApp.use(express.static('./app')))
  .chain(expressApp => readFile('./server/key.pem').map(keyContent => ({ expressApp, key: keyContent })))
  .chain(({expressApp, key}) => readFile('./server/cert.pem').map(certContent => ({ expressApp, key, cert: certContent })));

// It says spdy, but it's actually HTTP/2 :)

app
  .fork(error => console.log(error)
  , ({expressApp, key, cert}) => spdy.createServer({ key, cert }, expressApp).listen(8088));
